package kienminh.tetrisgame.service.impl;

import jakarta.annotation.PreDestroy;
import kienminh.tetrisgame.model.entity.Player;
import kienminh.tetrisgame.model.entity.User;
import kienminh.tetrisgame.model.game.GameState;
import kienminh.tetrisgame.repository.PlayerRepository;
import kienminh.tetrisgame.repository.UserRepository;
import kienminh.tetrisgame.service.interfaces.GameService;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.concurrent.*;

@Service("soloGameService")
@RequiredArgsConstructor
public class SoloGameServiceImpl implements GameService {

    private static final Logger logger = LoggerFactory.getLogger(SoloGameServiceImpl.class);
    private final UserScoreService userScoreService;
    private final PlayerRepository playerRepository;

    /** Scheduler chung cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i */
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(4);

    /** Tr·∫°ng th√°i t·ª´ng ng∆∞·ªùi ch∆°i */
    private final Map<Long, GameState> gameStates = new ConcurrentHashMap<>();

    /** Task ƒëang ch·∫°y t·ª± ƒë·ªông tick */
    private final Map<Long, ScheduledFuture<?>> scheduledTasks = new ConcurrentHashMap<>();

    /** L∆∞u interval hi·ªán t·∫°i c·ªßa m·ªói player ƒë·ªÉ ki·ªÉm tra */
    private final Map<Long, Long> currentIntervals = new ConcurrentHashMap<>();

    @Override
    public GameState startGame(Long playerId) {
        Player player = playerRepository.findById(playerId)
                .orElseThrow(() -> new IllegalArgumentException("Player not found"));

        // T·∫°o game m·ªõi
        GameState state = new GameState();
        state.start();
        gameStates.put(playerId, state);

        // B·∫Øt ƒë·∫ßu tick t·ª± ƒë·ªông
        scheduleTick(playerId);

        return state;
    }

    /** üß≠ T√≠nh t·ªëc ƒë·ªô r∆°i theo level */
    private long getIntervalForLevel(int level) {
        // Level c√†ng cao -> r∆°i c√†ng nhanh (min 200ms)
        return Math.max(200, 1000 - (level - 1) * 150);
    }

    /** ‚è±Ô∏è T·∫°o ho·∫∑c c·∫≠p nh·∫≠t task tick cho player */
    private void scheduleTick(Long playerId) {
        GameState state = gameStates.get(playerId);
        if (state == null) return;

        // H·ªßy task c≈© n·∫øu c√≥
        ScheduledFuture<?> oldTask = scheduledTasks.remove(playerId);
        if (oldTask != null && !oldTask.isCancelled()) {
            oldTask.cancel(false); // ‚úÖ ƒê·ªïi t·ª´ true ‚Üí false ƒë·ªÉ ƒë·ª£i task ho√†n th√†nh
        }

        long interval = getIntervalForLevel(state.getLevel());
        currentIntervals.put(playerId, interval);
        logger.info("‚ñ∂ Start tick for player {} with interval {}ms (level {})",
                playerId, interval, state.getLevel());

        ScheduledFuture<?> future = scheduler.scheduleAtFixedRate(() -> {
            try {
                GameState current = gameStates.get(playerId);
                if (current == null) return;

                if (current.isGameOver()) {
                    cancelTick(playerId);
                    return;
                }

                // ‚úÖ KI·ªÇM TRA TR∆Ø·ªöC KHI TICK
                // N·∫øu level ƒë√£ thay ƒë·ªïi, reschedule v√† KH√îNG tick l·∫ßn n√†y
                int currentLevel = current.getLevel();
                long expectedInterval = getIntervalForLevel(currentLevel);
                Long storedInterval = currentIntervals.get(playerId);

                if (storedInterval != null && expectedInterval != storedInterval) {
                    logger.info("‚ö° Level {} reached -> rescheduling tick for player {}",
                            currentLevel, playerId);
                    cancelTick(playerId);
                    scheduleTick(playerId);
                    return; // ‚úÖ RETURN s·ªõm, kh√¥ng tick l·∫ßn n√†y
                }

                // ‚úÖ CH·ªà TICK M·ªòT L·∫¶N
                tick(playerId);

            } catch (Exception e) {
                logger.error("Error in tick loop for player " + playerId, e);
            }
        }, 0, interval, TimeUnit.MILLISECONDS);

        scheduledTasks.put(playerId, future);
    }

    /** üßπ H·ªßy tick c·ªßa player */
    private void cancelTick(Long playerId) {
        ScheduledFuture<?> future = scheduledTasks.remove(playerId);
        if (future != null && !future.isCancelled()) {
            future.cancel(false); // ‚úÖ ƒê·ªïi t·ª´ true ‚Üí false
            logger.info("‚èπÔ∏è Tick cancelled for player {}", playerId);
        }
        currentIntervals.remove(playerId);
    }

    /** üß± Tick logic */
    @Override
    public GameState tick(Long playerId) {
        GameState state = getState(playerId);
        state.tick();

        if (state.isGameOver()) {
            handleGameOver(playerId, state);
        }

        return state;
    }

    /** üíæ Khi game over */
    private void handleGameOver(Long playerId, GameState state) {
        try {
            logger.info("üéÆ Attempting to save score {} for player {}", state.getScore(), playerId);
            userScoreService.saveScore(playerId, state.getScore());
            logger.info("‚úÖ Score saved successfully");
        } catch (Exception e) {
            logger.error("‚ùå Failed to save score for player {}: {}", playerId, e.getMessage(), e);
        }

        gameStates.remove(playerId);
        cancelTick(playerId);
        logger.info("üíÄ Game over for player {}", playerId);
    }

    // --- C√°c h√†nh ƒë·ªông t·ª´ ng∆∞·ªùi ch∆°i ---
    @Override
    public GameState moveLeft(Long playerId) {
        GameState state = getState(playerId);
        state.moveLeft();
        return state;
    }

    @Override
    public GameState moveRight(Long playerId) {
        GameState state = getState(playerId);
        state.moveRight();
        return state;
    }

    @Override
    public GameState rotate(Long playerId) {
        GameState state = getState(playerId);
        state.rotate();
        return state;
    }

    @Override
    public GameState drop(Long playerId) {
        GameState state = getState(playerId);
        state.drop();
        return state;
    }

    @Override
    public boolean isGameOver(Long playerId) {
        return getState(playerId).isGameOver();
    }

    @Override
    public GameState getState(Long playerId) {
        GameState state = gameStates.get(playerId);
        if (state == null) throw new IllegalStateException("Game not started for player " + playerId);
        return state;
    }

    @PreDestroy
    public void shutdown() {
        logger.info("üõë Shutting down SoloGameService scheduler...");
        scheduler.shutdownNow();
    }
}