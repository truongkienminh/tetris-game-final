package kienminh.tetrisgame.controller;

import kienminh.tetrisgame.dto.RoomDTO;
import kienminh.tetrisgame.model.entity.Player;
import kienminh.tetrisgame.model.entity.User;
import kienminh.tetrisgame.service.impl.PlayerServiceImpl;
import kienminh.tetrisgame.service.impl.RoomServiceImpl;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/rooms")
@RequiredArgsConstructor
public class RoomController {

    private final RoomServiceImpl roomService;
    private final PlayerServiceImpl playerService;

    /**
     * üîπ T·∫°o ph√≤ng m·ªõi (JWT x√°c th·ª±c)
     */
    @PostMapping("/create")
    public ResponseEntity<RoomDTO> createRoom(
            @RequestParam String roomName,
            @AuthenticationPrincipal User currentUser
    ) {
        RoomDTO room = roomService.createRoom(roomName, currentUser);
        return ResponseEntity.ok(room);
    }

    /**
     * üîπ Ng∆∞·ªùi ch∆°i tham gia ph√≤ng
     */
    @PostMapping("/{roomId}/join")
    public ResponseEntity<RoomDTO> joinRoom(
            @PathVariable Long roomId,
            @AuthenticationPrincipal User currentUser
    ) {
        Player player = playerService.getCurrentPlayer(currentUser);
        RoomDTO updatedRoom = roomService.joinRoom(roomId, player);
        return ResponseEntity.ok(updatedRoom);
    }

    /**
     * üîπ Ng∆∞·ªùi ch∆°i r·ªùi ph√≤ng
     */
    @PostMapping("/{roomId}/leave")
    public ResponseEntity<String> leaveRoom(
            @PathVariable Long roomId,
            @AuthenticationPrincipal User currentUser
    ) {
        // L·∫•y Player hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
        Player player = playerService.getCurrentPlayer(currentUser);

        // G·ªçi service ƒë·ªÉ r·ªùi ph√≤ng
        roomService.leaveRoom(roomId, player);
        return ResponseEntity.ok("Player " + currentUser.getUsername() + " left room " + roomId);
    }

    /**
     * üîπ X√≥a ph√≤ng (ch·ªâ host ho·∫∑c admin)
     */
    @DeleteMapping("/{roomId}")
    public ResponseEntity<String> deleteRoom(@PathVariable Long roomId) {
        roomService.deleteRoom(roomId);
        return ResponseEntity.ok("Room deleted successfully");
    }

    /**
     * üîπ L·∫•y danh s√°ch t·∫•t c·∫£ ph√≤ng
     */
    @GetMapping
    public ResponseEntity<List<RoomDTO>> getAllRooms() {
        List<RoomDTO> rooms = roomService.getAllRooms();
        return ResponseEntity.ok(rooms);
    }

    /**
     * üîπ L·∫•y th√¥ng tin chi ti·∫øt 1 ph√≤ng
     */
    @GetMapping("/{roomId}")
    public ResponseEntity<RoomDTO> getRoomById(@PathVariable Long roomId) {
        return roomService.getRoomById(roomId)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
}
